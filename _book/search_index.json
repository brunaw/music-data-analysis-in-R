[
["applications.html", "3 Applications 3.1 Chords 3.2 Lyrics", " 3 Applications Some significant applications are demonstrated in this chapter. 3.1 Chords chorrrds is a package to retrieve and analyse music data. It scrapes the Cifraclub website to download and organize music chords. Th package was created during my undergrad’s thesis. In that work, I did an end-to-end analysis, exploring feature engineering techniques to describe and predict musical genres from music chord representation. In this section we will how to use the chorrrds functions and show some usage examples. 3.1.1 Installation You can install chorrrds from your favourite CRAN mirror, simply running: install.packages(&quot;chorrrds&quot;) You can also install the latest versios of chorrrds from the R-Music GitHub organization with: # install.packages(&quot;devtools&quot;) devtools::install_github(&quot;r-music/chorrrds&quot;) 3.1.2 Functions The main function of the package is called get_chords(). It extracts music chords from an specific artist. There is two steps to obtain the data: Extraction of song urls for each music of an artist with get_songs. Extraction of music chords using the urls with get_chords. library(tidyverse) songs &lt;- &quot;janis-joplin&quot; %&gt;% chorrrds::get_songs() At this point, the chorrrd object contains the url to be accessed via webscraping and the name of each song. Next, we actually extract their music chords with the get_chords function: chords &lt;- songs %&gt;% dplyr::pull(url) %&gt;% purrr::map(chorrrds::get_chords) %&gt;% # Mapping the function over the # selected urls purrr::map_dfr(dplyr::mutate_if, is.factor, as.character) %&gt;% chorrrds::clean(message = FALSE) # Cleans the dataset, in case # strange elements, as music lyrics, # are present when they shouldn&#39;t chord key music long_str F A# janis joplin a woman left lonely 5 Dadd9 A# janis joplin a woman left lonely 5 Dsus4/9 A# janis joplin a woman left lonely 5 D5 A# janis joplin a woman left lonely 5 Dadd9 A# janis joplin a woman left lonely 5 Dsus4/9 A# janis joplin a woman left lonely 5 D5 A# janis joplin a woman left lonely 5 G A# janis joplin a woman left lonely 5 C A# janis joplin a woman left lonely 5 G A# janis joplin a woman left lonely 5 The table above shows us how are the results of the get_chords function. As we can see, the data is in a long format: the chords appear in the sequence they are in each music, being repeated sometimes. The music column contains the name of the artist and the name of the song. This can be changed if preferred, with: chords &lt;- chords %&gt;% tidyr::separate(music, c(&quot;artist&quot;, &quot;music&quot;), sep = &quot;(?&lt;=joplin) &quot;, extra = &quot;merge&quot;) chord key artist music long_str F A# janis joplin a woman left lonely 5 Dadd9 A# janis joplin a woman left lonely 5 Dsus4/9 A# janis joplin a woman left lonely 5 D5 A# janis joplin a woman left lonely 5 Dadd9 A# janis joplin a woman left lonely 5 Dsus4/9 A# janis joplin a woman left lonely 5 D5 A# janis joplin a woman left lonely 5 G A# janis joplin a woman left lonely 5 C A# janis joplin a woman left lonely 5 G A# janis joplin a woman left lonely 5 3.1.3 Data There are many datasets that already come with the package. They were used in the undergrad thesis, so it was a choice just to keep it in the package. The data is composed of several Brazilian artists music chords. You can check the available datasets with the code above, which will not be run here because the results are long: library(chorrrds) ls(&quot;package:chorrrds&quot;) 3.1.4 Use case Returning to the data we collected before, let us explore it a little. The first thing we can look at is the most common chords in each music. Which are the common chords in music made by Janis Joplin? Are the proportions of these chords similar between the songs? percentages &lt;- chords %&gt;% dplyr::group_by(music) %&gt;% dplyr::count(chord) %&gt;% dplyr::top_n(n, n = 3) %&gt;% dplyr::mutate(prop = scales::percent(n/sum(n))) music chord n prop a woman left lonely Bb 11 32.35% a woman left lonely D 11 32.35% a woman left lonely F 12 35.29% ball and chain Cm 11 40.7% ball and chain Dm 5 18.5% ball and chain Gm 11 40.7% blowin in the wind A 19 26.4% blowin in the wind D 28 38.9% blowin in the wind G 25 34.7% buried alive in blues C 3 37.5% buried alive in blues D 1 12.5% buried alive in blues G 4 50.0% bye bye baby A 4 10.3% bye bye baby C 11 28.2% bye bye baby D 4 10.3% bye bye baby E 4 10.3% bye bye baby G 16 41.0% call on me A 9 31.03% call on me B 11 37.93% call on me E 9 31.03% combination of the two A 8 26.7% combination of the two Abm 4 13.3% combination of the two B 4 13.3% combination of the two E 10 33.3% combination of the two F#m 4 13.3% cry baby C 30 40.5% cry baby F 25 33.8% cry baby G 19 25.7% dear landlord A 2 10.5% dear landlord Am 2 10.5% dear landlord Bb 2 10.5% dear landlord C 2 10.5% dear landlord Em 2 10.5% dear landlord F 6 31.6% dear landlord G 3 15.8% get it while you can Bb 15 22.4% get it while you can C 31 46.3% get it while you can F 21 31.3% half moon C 6 33.3% half moon C7 2 11.1% half moon F 2 11.1% half moon F7+ 2 11.1% half moon G 6 33.3% kozmic blues Am 6 20.7% kozmic blues D 7 24.1% kozmic blues F 10 34.5% kozmic blues G 6 20.7% little girl blue Bb 12 34.3% little girl blue C/E 6 17.1% little girl blue F 17 48.6% maybe Am7 9 25.7% maybe C 12 34.3% maybe G 14 40.0% me and bobby mcgee A 73 43.7% me and bobby mcgee E7 68 40.7% me and bobby mcgee G 26 15.6% mercedes benz A 5 14.3% mercedes benz Bm7 5 14.3% mercedes benz D 15 42.9% mercedes benz G 10 28.6% miseryn Abm 4 26.7% miseryn B 5 33.3% miseryn C#m 6 40.0% move over A 2 33.3% move over E 2 33.3% move over G 2 33.3% one good man A 8 33.3% one good man B 4 16.7% one good man E 12 50.0% piece of my heart A 54 37.5% piece of my heart B 67 46.5% piece of my heart E 23 16.0% somebody to love B 7 30.4% somebody to love E 4 17.4% somebody to love F#m 12 52.2% st james infirmary Am 4 22.2% st james infirmary B7 5 27.8% st james infirmary Em 9 50.0% summertime Cm6 35 37.2% summertime D7 12 12.8% summertime Gm 47 50.0% the rose C 7 41.2% the rose F 4 23.5% the rose Fm 3 17.6% the rose G 3 17.6% trouble in mind A7 1 14.3% trouble in mind D 1 14.3% trouble in mind D7 3 42.9% trouble in mind G7 2 28.6% try just little bit harder A 21 51.2% try just little bit harder E7 14 34.1% try just little bit harder G 6 14.6% what good can drinkin do B 19 65.5% what good can drinkin do E 4 13.8% what good can drinkin do F# 6 20.7% With the dataset analyzed here, we can already obtain some interesting information. For some songs, as the first and second pieces, the 3 most common chords appeared in a close proportion. For others, this happens in a different way. Both the proportions and the absolute quantities of the chords vary more. That shows us that the structure of her songs don’t follow a closed pattern, which can be a sign of how creative the artist was. We can also look at something called “chord bigrams”. This is pretty much the task of creating pairs of chords that happened in sequence, by music, and analyze their frequencies. chord_bigram &lt;- chords %&gt;% dplyr::group_by(music) %&gt;% tidytext::unnest_tokens(bigram, chord, to_lower = FALSE, token = &quot;ngrams&quot;, n = 2) %&gt;% dplyr::count(bigram) %&gt;% dplyr::top_n(n, n = 2) music bigram n a woman left lonely Bb F 6 a woman left lonely C G 6 a woman left lonely G C 6 ball and chain Cm Gm 6 ball and chain Gm Cm 8 blowin in the wind A D 19 blowin in the wind D G 22 blowin in the wind G A 19 buried alive in blues C G 2 buried alive in blues G C 2 bye bye baby C G 10 bye bye baby G C 10 call on me A E 5 call on me B A 9 call on me C m 5 call on me m B 5 combination of the two B A 4 combination of the two F m 4 cry baby C F 23 cry baby F C 15 dear landlord A F 2 dear landlord Am G 2 dear landlord F A 2 dear landlord G F 2 get it while you can Bb F 15 get it while you can C Bb 15 get it while you can F C 18 half moon C G 4 half moon G C 4 kozmic blues F F 7 kozmic blues G Am 7 little girl blue Bb F 8 little girl blue C E 6 little girl blue F C 6 maybe C F 5 maybe G C 5 maybe G Gmaj7 5 maybe Gmaj7 Em 5 maybe Gsus G 5 me and bobby mcgee A A 60 me and bobby mcgee E7 E7 58 mercedes benz A D 5 mercedes benz Bm7 G 5 mercedes benz D Bm7 5 mercedes benz D G 5 mercedes benz G A 5 mercedes benz G D 5 miseryn C m 6 miseryn m Abm 4 move over A A 1 move over A C 1 move over B A 1 move over C B 1 move over E G 2 move over G A 1 move over G E 1 one good man A E 8 one good man B A 4 one good man E A 4 one good man E B 4 piece of my heart A B 24 piece of my heart B B 35 somebody to love F m 12 somebody to love m B 6 st james infirmary B7 Em 5 st james infirmary Em Am 4 st james infirmary Em B7 4 summertime Cm6 Gm 32 summertime Gm Cm6 33 the rose C G 3 the rose F Fm 3 the rose Fm C 3 the rose G F 3 trouble in mind A7 D7 1 trouble in mind D D7 1 trouble in mind D7 A7 1 trouble in mind D7 G7 1 trouble in mind G7 D7 1 trouble in mind G7 G7 1 try just little bit harder A E7 12 try just little bit harder E7 A 11 what good can drinkin do B B 8 what good can drinkin do B F 6 what good can drinkin do F B 6 There are some bigrams that happen many times in a song, while others just a few times, but are still the most frequent ones. In the song called “Piece of my heart”, we have the repetition of the chord “B”, which is described by the appearance of the “B B” bigram. More of what we can find with this format of data can be found in the next section of this book. 3.2 Lyrics The vagalumeR package provides us with access to the Vagalume website API. Vagalume is a music portal, and its API has information about discographies, music names, related artists, and the most important one, music lyrics. The first version of the package goes back to 2017 when I was taking a Text Mining course. For the course assignments, we were asked to deliver some interesting analysis using text and the techniques we learned. As by that time I did not found anything related to music lyrics datasets, I made the package to solve this problem. "],
["how-to-get-the-api-key.html", "4 How to get the API key 4.1 Acessing the Spotify API 4.2 Tablatures 4.3 Audio", " 4 How to get the API key We are going to start by explaining how to get the API key . You will need to be aware that Vagalume is a Brazilian website, so everything there will be in Portuguese. The following explains how to go through that barrier and successfully get the key. Access https://auth.vagalume.com.br/ and log in (it can be done with some social media account in the “Entre com” buttons): Go to https://auth.vagalume.com.br/settings/api/ and create an application: Click on the “Adicionar Credencial” button and fill the name (“Nome da aplicação”) and its purpose (“Descrição da aplicação”). Click “Cadastrar” to create it. Now you must have an API key available for use. In https://auth.vagalume.com.br/settings/api/, copy your key from the “Credencial” section: And there you have it. Now it is just a matter of having your key stored in an object, ready to be used when needed: key &lt;- &quot;your-api-key&quot; The vagalumeR package has 6 main functions: artistInfo(): brings us information about an specific artist. discography(): gives us the discography of an artist. relatedInfo(): brings us information about related artists of one specific musician/band. genre(): finds the music genre (or genres) of the artist. albums(): finds the albums of the artist. songNames(): gives us the names for the songs of an artist. topLyrics(): tells us about the top acessed lyrics of an artist. lyrics(): brings the full lyrics and translation (when available) of the songs! For today’s post, we will be working with the band called Belle and Sebastian. I personally like the band style and their lyrics, which can be taken as very poetic sometimes. The installation of the package is done with: # install it either from # CRAN install.packages(&#39;vagalumeR&#39;) # or github devtools::install_github(&quot;r-music/vagalumeR&quot;) # checking the help of the package help(package = &quot;vagalumeR&quot;) The lyrics obtention process needs two things: an artist, for who we will first get the name of the songs, and the song ids. The code is as follows: library(tidyverse) # always library(vagalumeR) # loading the package! # defining the artist artist &lt;- &quot;the-white-stripes&quot; # Firt, obtaining the song names song &lt;- songNames(artist) # Mapping the lyrics function over the ids found lyrics_data &lt;- song %&gt;% dplyr::pull(song.id) %&gt;% purrr::map(lyrics, artist = artist, type = &quot;id&quot;, key = key) %&gt;% purrr::map_df(data.frame) ## [1] &quot;Lyrics not found&quot; ## [1] &quot;Lyrics not found&quot; ## [1] &quot;Lyrics not found&quot; ## [1] &quot;Lyrics not found&quot; glimpse(lyrics_data) ## Observations: 111 ## Variables: 8 ## $ id &lt;fct&gt; 3ade68b7g2e135ea3, 3ade68b7ged032ea3, 3ade68b7gfd032… ## $ name &lt;chr&gt; &quot;the-white-stripes&quot;, &quot;the-white-stripes&quot;, &quot;the-white… ## $ lang &lt;int&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2… ## $ text &lt;chr&gt; &quot;I am as ugly as I seem Worse than all your dreams C… ## $ song.id &lt;fct&gt; 3ade68b7g2e135ea3, 3ade68b7ged032ea3, 3ade68b7gfd032… ## $ song &lt;chr&gt; &quot;the-white-stripes&quot;, &quot;the-white-stripes&quot;, &quot;the-white… ## $ language &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, NA, 1, 1, 1, NA, NA, NA, … ## $ translation &lt;chr&gt; &quot;Eu sou tão feio como pareço Pior que todos os seus… Now we have our artists id and name, the songs names and ids, their language (2 for English and 1 for Portuguese!), the original lyrics and the translation, when available. But that it’s not the only functionality of the vagalumeR package. The function below gives us the information about the artist: art_info &lt;- vagalumeR::artistInfo(artist) art_info %&gt;% knitr::kable() id name views pos period uniques points 3ade68b5g1808eda3 White Stripes 873 1287 201811 503 1.2 Those information represent the position of the artist (column pos) in a certain period (column period). There is also information about how many views (column unique) the artist had how many unique users (column unique) accessed the artist, as well as their Vagalume Ranking pontuation, that can either increase or decrease in the period. The artist’s genre, on the other hand, is extracted with an specific function, once there can be a multiple categorization instead of just one music genre: genre &lt;- vagalumeR::genre(artist) genre %&gt;% knitr::kable() genre Rock Rock Alternativo Indie Punk Rock Blues And names of the top lyrics for the artists can be found with: top_lyr &lt;- vagalumeR::topLyrics(artist) top_lyr %&gt;% knitr::kable() id name id.top song 3ade68b5g1808eda3 White Stripes 3ade68b6g7877fda3 Seven Nation Army 3ade68b5g1808eda3 White Stripes 3ade68b6ga877fda3 I Just Don’t Know What To Do With Myself 3ade68b5g1808eda3 White Stripes 3ade68b7g71132ea3 We’re Going To Be Friends 3ade68b5g1808eda3 White Stripes 3ade68b6g0437fda3 Fell In Love With A Girl 3ade68b5g1808eda3 White Stripes 3ade68b7g5f032ea3 Jolene 3ade68b5g1808eda3 White Stripes 3ade68b7g73d05ea3 Blue Orchid 3ade68b5g1808eda3 White Stripes 3ade68b6g9ddafda3 The Hardest Button To Button 3ade68b5g1808eda3 White Stripes 3ade68b7gd0132ea3 St. James Infirmary Blues 3ade68b5g1808eda3 White Stripes 3ade68b7gf55c2ea3 Well It’s True That We Love One Another 3ade68b5g1808eda3 White Stripes 3ade68b7gd1132ea3 You’ve Got Her In Your Pocket 3ade68b5g1808eda3 White Stripes 3ade68b7gfe032ea3 I’m Bound To Pack It Up 3ade68b5g1808eda3 White Stripes 3ade68b7g21132ea3 The Union Forever 3ade68b5g1808eda3 White Stripes 3ade68b8gbf7f0fa3 Effect And Cause 3ade68b5g1808eda3 White Stripes 3ade68b8gc3340fa3 Love Is The Truth 3ade68b5g1808eda3 White Stripes 3ade68b8g1f720fa3 Icky Thump 3ade68b5g1808eda3 White Stripes 3ade68b8g33bf0fa3 300 M.P.H. Torrential Outpour Blues 3ade68b5g1808eda3 White Stripes 3ade68b7gdd032ea3 Apple Blossom 3ade68b5g1808eda3 White Stripes 3ade68b7gf0132ea3 Suzy Lee 3ade68b5g1808eda3 White Stripes 3ade68b6ga95bfda3 Girl, You Have No Faith In Medicine 3ade68b5g1808eda3 White Stripes 3ade68b7gbf032ea3 Little Acorns 3ade68b5g1808eda3 White Stripes 3ade68b6g8877fda3 Black Math 3ade68b5g1808eda3 White Stripes 3ade68b6g30f7fda3 Dead Leaves And The Dirty Ground 3ade68b5g1808eda3 White Stripes 3ade68b7gaf032ea3 Let’s Shake Hands 3ade68b5g1808eda3 White Stripes 3ade68b7g20132ea3 Now Mary 3ade68b5g1808eda3 White Stripes 3ade68b7g30132ea3 Offend In Every Way This table represents their mos popular songs in the Vagalume website. Information about the albums of an artist is also available in the API, and we access it with: albums &lt;- vagalumeR::albums(artist) albums %&gt;% knitr::kable() id title year 3ade68b6gc658fda3 Under Great White Northern Lights 2010 3ade68b6gfde7fda3 Icky Thump 2007 3ade68b6g1923fda3 Walking with a Ghost 2005 3ade68b6g0923fda3 Get Behind Me Satan 2005 3ade68b6g3f55fda3 Elephant 2003 3ade68b6ga1e6fda3 White Blood Cells 2001 3ade68b6gf823fda3 De Stijl 2000 3ade68b6g91e6fda3 The White Stripes 1999 We can also check the information about related/similar bands and artists, with the relatedInfo function: rel_info &lt;- vagalumeR::relatedInfo(artist) rel_info %&gt;% knitr::kable() id name rel.id related 3ade68b5g1808eda3 White Stripes 3ade68b5g8e77eda3 Queens Of The Stone Age 3ade68b5g1808eda3 White Stripes 3ade68b6g6bf9eda3 Audioslave 3ade68b5g1808eda3 White Stripes 3ade68b6g35f9eda3 The Strokes 3ade68b5g1808eda3 White Stripes 3ade68b6g28c9eda3 Rolling Stones 3ade68b5g1808eda3 White Stripes 3ade68b6gc8e0fda3 Arctic Monkeys 3ade68b5g1808eda3 White Stripes 3ade68b3g7c86eda3 Pink Floyd 3ade68b5g1808eda3 White Stripes 3ade68b5g7027eda3 Incubus 3ade68b5g1808eda3 White Stripes 3ade68b3g0c86eda3 Led Zeppelin 3ade68b5g1808eda3 White Stripes 3ade68b6g9b1ceda3 The Killers 3ade68b5g1808eda3 White Stripes 3ade68b5g4467eda3 Nirvana That last table is the type of data that will later allow us to create networks between the artists, for example. In summary, the vagalumeR package can be used to extract a lot of important features about the musicians, and we will explore the data in the next section. 4.1 Acessing the Spotify API 4.2 Tablatures 4.3 Audio "]
]
